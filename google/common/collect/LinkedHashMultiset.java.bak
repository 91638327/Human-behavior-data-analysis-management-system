package com.google.common.collect;
import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
import com.google.common.collect.AbstractMapBasedMultiset;
import com.google.common.collect.Iterables;
import com.google.common.collect.Maps;
import com.google.common.collect.Multisets;
import com.google.common.collect.Serialization;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.LinkedHashMap;
@GwtCompatible(
   serializable = true,
   emulated = true
)
public final class LinkedHashMultiset extends AbstractMapBasedMultiset {
   @GwtIncompatible("not needed in emulated source")
   private static final long serialVersionUID = 0L;
   public static LinkedHashMultiset create() {
      return new LinkedHashMultiset();
   }
   public static LinkedHashMultiset create(int distinctElements) {
      return new LinkedHashMultiset(distinctElements);
   }
   public static LinkedHashMultiset create(Iterable elements) {
      LinkedHashMultiset<E> multiset = create(Multisets.inferDistinctElements(elements));
      Iterables.addAll(multiset, elements);
      return multiset;
   }
   private LinkedHashMultiset() {
      super(new LinkedHashMap());
   }
   private LinkedHashMultiset(int distinctElements) {
      super(new LinkedHashMap(Maps.capacity(distinctElements)));
   }
   @GwtIncompatible("java.io.ObjectOutputStream")
   private void writeObject(ObjectOutputStream stream) throws IOException {
      stream.defaultWriteObject();
      Serialization.writeMultiset(this, stream);
   }
   @GwtIncompatible("java.io.ObjectInputStream")
   private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
      stream.defaultReadObject();
      int distinctElements = Serialization.readCount(stream);
      this.setBackingMap(new LinkedHashMap(Maps.capacity(distinctElements)));
      Serialization.populateMultiset(this, stream, distinctElements);
   }
// 
               Closer.LoggingSuppressor.INSTANCE.suppress(closeable, thrown, suppressed);
            }
         }
      }
   }
   @VisibleForTesting
   interface Suppressor {
      void suppress(Closeable var1, Throwable var2, Throwable var3);
   }
}
package com.google.common.io;
import com.google.common.annotations.Beta;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.annotation.Nullable;
@Beta
public final class CountingInputStream extends FilterInputStream {
   private long count;
   private long mark = -1L;
   public CountingInputStream(@Nullable InputStream in) {
      super(in);
   }
   public long getCount() {
      return this.count;
   }
   public int read() throws IOException {
      int result = this.in.read();
      if(result != -1) {
         ++this.count;
      }
      return result;
   }
   public int read(byte[] b, int off, int len) throws IOException {
      int result = this.in.read(b, off, len);
      if(result != -1) {
         this.count += (long)result;
      }
      return result;
   }
   public long skip(long n) throws IOException {
      long result = this.in.skip(n);
      this.count += result;
      return result;
   }
   public synchronized void mark(int readlimit) {
      this.in.mark(readlimit);
      this.mark = this.count;
   }
   public synchronized void reset() throws IOException {
      if(!this.in.markSupported()) {
         throw new IOException("Mark not supported");
      } else if(this.mark == -1L) {
         throw new IOException("Mark not set");
      } else {
         this.in.reset();
         this.count = this.mark;
      }
   }
}
package com.google.common.io;
import com.google.common.annotations.Beta;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import javax.annotation.Nullable;
@Beta
public final class CountingOutputStream extends FilterOutputStream {
   private long count;
   public CountingOutputStream(@Nullable OutputStream out) {
      super(out);
   }
   public long getCount() {
      return this.count;
   }
   public void write(byte[] b, int off, int len) throws IOException {
      this.out.write(b, off, len);
      this.count += (long)len;
   }
   public void write(int b) throws IOException {
      this.out.write(b);
      ++this.count;
   }
   public void close() throws IOException {
      this.out.close();
   }
}